# AUTOGENERATED! DO NOT EDIT! File to edit: nbs/00_characters.ipynb (unless otherwise specified).

__all__ = ['Ability', 'Character', 'Wizard', 'Demon']

# Cell
import random

from abc import ABC, abstractmethod

# Cell
class Ability:
    ability_types = ["fire", "water"]

    def __init__(self, damage, damage_type):
        self.damage = damage
        self.damage_type = damage_type

    @abstractmethod
    def __str__(self):
        if self.damage_type == "fire":
            return "A jet of fire shot from your wand towards your target."
        elif self.damage_type == "water":
            return "Ice cold water sprung from your wand directed at your target."


# Cell
class Character(ABC):
    def __init__(self, name, health):
        self.name = name
        self.health = health
        self.level = 1

    @abstractmethod
    def attack(self, target):
        pass

    @abstractmethod
    def defend(self, attacker):
        pass

    def status(self):
        print(f"{self.name}'s Health: {self.health}")

# Cell
class Wizard(Character):
    def __init__(self, name, health, ability):
        super().__init__(name, health)
        self.ability = ability

    def attack(self, target):
        # scaling = random.uniform(0, 1)
        print(self.ability)
        target.health -= self.ability.damage

    def defend(self):
        pass

# Cell
class Demon(Character):
    def __init__(self, name, health, ability):
        super().__init__(name, health)
        self.ability = ability

    def attack(self, target):
        # scaling = random.uniform(0, 1)
        target.health -= self.ability.damage

    def defend(self):
        pass